{"version":3,"sources":["components/SliderItems.js","components/Slider.js","components/Dashboard.js","reportWebVitals.js","index.js"],"names":["railOuterStyle","position","width","height","transform","borderRadius","cursor","railInnerStyle","pointerEvents","backgroundColor","boxShadow","SliderRail","getRailProps","style","Handle","domain","min","max","handle","id","value","percent","getHandleProps","disabled","left","WebkitTapHighlightColor","zIndex","role","aria-valuemin","aria-valuemax","aria-valuenow","background","Track","source","target","getTrackProps","defaultProps","sliderStyle","touchAction","SliderComponent","onUpdate","onChange","mode","step","rootStyle","values","handles","className","map","right","tracks","stripOptions","overlapOptions","defaultOverlapOption","defaultStripOption","Dashboard","useState","WidthUpdate","setWidthUpdate","HeightUpdate","setHeightUpdate","WidthValues","setWidthValues","HeightValues","setHeightValues","OverlapValues","setOverlapValues","StripValues","setStripValues","Math","ceil","LabelValues","setLabelValues","Label2Values","setLabel2Values","Slider","update","options","controlClassName","arrowClassName","placeholderClassName","menuClassName","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7efef550.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// *******************************************************\r\n// RAIL\r\n// *******************************************************\r\nconst railOuterStyle = {\r\n  position: \"absolute\",\r\n  width: \"100%\",\r\n  height: 42,\r\n  transform: \"translate(0%, -50%)\",\r\n  borderRadius: 7,\r\n  cursor: \"pointer\",\r\n  // border: '1px solid white',\r\n};\r\n\r\nconst railInnerStyle = {\r\n  position: \"absolute\",\r\n  width: \"100%\",\r\n  height: 14,\r\n  transform: \"translate(0%, -50%)\",\r\n  borderRadius: 7,\r\n  pointerEvents: \"none\",\r\n  backgroundColor: \"#3a3a3a\",\r\n  boxShadow: \"1px 1px 1px 1px rgba(0, 0, 0, 0.2)\",\r\n};\r\n\r\nexport function SliderRail({ getRailProps }) {\r\n  return (\r\n    <Fragment>\r\n      <div style={railOuterStyle} {...getRailProps()} />\r\n      <div style={railInnerStyle} />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nSliderRail.propTypes = {\r\n  getRailProps: PropTypes.func.isRequired,\r\n};\r\n\r\n// *******************************************************\r\n// HANDLE COMPONENT\r\n// *******************************************************\r\nexport function Handle({\r\n  domain: [min, max],\r\n  handle: { id, value, percent },\r\n  disabled,\r\n  getHandleProps,\r\n}) {\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: \"absolute\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          WebkitTapHighlightColor: \"rgba(0,0,0,0)\",\r\n          zIndex: 5,\r\n          width: 18,\r\n          height: 42,\r\n          cursor: \"pointer\",\r\n          //   border: '1px solid white',\r\n          backgroundColor: \"none\",\r\n        }}\r\n        {...getHandleProps(id)}\r\n      />\r\n      <div\r\n        role=\"slider\"\r\n        aria-valuemin={min}\r\n        aria-valuemax={max}\r\n        aria-valuenow={value}\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: \"absolute\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          zIndex: 2,\r\n          width: 14,\r\n          height: 24,\r\n          borderRadius: \"20%\",\r\n          boxShadow: \"0px 0px 2px 2px rgba(0, 0, 0, 0.3)\",\r\n          // backgroundColor: disabled ? '#666' : '#9d9d9d',\r\n          background:\r\n            \"linear-gradient(18deg, rgba(80,80,80,1), rgba(200,200,200,1) 90.71%)\",\r\n        }}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nHandle.propTypes = {\r\n  domain: PropTypes.array.isRequired,\r\n  handle: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  getHandleProps: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nHandle.defaultProps = {\r\n  disabled: false,\r\n};\r\n\r\n// *******************************************************\r\n// KEYBOARD HANDLE COMPONENT\r\n// Uses a button to allow keyboard events\r\n// *******************************************************\r\nexport function KeyboardHandle({\r\n  domain: [min, max],\r\n  handle: { id, value, percent },\r\n  disabled,\r\n  getHandleProps,\r\n}) {\r\n  return (\r\n    <button\r\n      role=\"slider\"\r\n      aria-valuemin={min}\r\n      aria-valuemax={max}\r\n      aria-valuenow={value}\r\n      style={{\r\n        left: `${percent}%`,\r\n        position: \"absolute\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        zIndex: 2,\r\n        width: 24,\r\n        height: 24,\r\n        borderRadius: \"50%\",\r\n        boxShadow: \"1px 1px 1px 1px rgba(0, 0, 0, 0.3)\",\r\n        backgroundColor: disabled ? \"#666\" : \"#ffc400\",\r\n      }}\r\n      {...getHandleProps(id)}\r\n    />\r\n  );\r\n}\r\n\r\nKeyboardHandle.propTypes = {\r\n  domain: PropTypes.array.isRequired,\r\n  handle: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  getHandleProps: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nKeyboardHandle.defaultProps = {\r\n  disabled: false,\r\n};\r\n\r\n// *******************************************************\r\n// TRACK COMPONENT\r\n// *******************************************************\r\nexport function Track({ source, target, getTrackProps, disabled }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"absolute\",\r\n        transform: \"translate(0%, -50%)\",\r\n        height: 14,\r\n        zIndex: 1,\r\n        // backgroundColor: disabled ? '#999' : '#CCCCCC',\r\n        background: 'linear-gradient(0deg ,rgba(150, 150, 150, 1) , rgba(170, 170, 170, 1) 30.71%)',\r\n        borderRadius: 7,\r\n        cursor: \"pointer\",\r\n        left: `${source.percent}%`,\r\n        width: `${target.percent - source.percent}%`,\r\n      }}\r\n      {...getTrackProps()}\r\n    />\r\n  );\r\n}\r\n\r\nTrack.propTypes = {\r\n  source: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  target: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  getTrackProps: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nTrack.defaultProps = {\r\n  disabled: false,\r\n};\r\n\r\n// *******************************************************\r\n// TICK COMPONENT\r\n// *******************************************************\r\nexport function Tick({ tick, count, format }) {\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          marginTop: 14,\r\n          width: 1,\r\n          height: 5,\r\n          backgroundColor: \"rgb(200,200,200)\",\r\n          left: `${tick.percent}%`,\r\n        }}\r\n      />\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          marginTop: 22,\r\n          fontSize: 10,\r\n          textAlign: \"center\",\r\n          marginLeft: `${-(100 / count) / 2}%`,\r\n          width: `${100 / count}%`,\r\n          left: `${tick.percent}%`,\r\n        }}\r\n      >\r\n        {format(tick.value)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nTick.propTypes = {\r\n  tick: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  count: PropTypes.number.isRequired,\r\n  format: PropTypes.func.isRequired,\r\n};\r\n\r\nTick.defaultProps = {\r\n  format: (d) => d,\r\n};\r\n","import React from \"react\";\r\nimport { Slider, Rail, Handles, Tracks } from \"react-compound-slider\";\r\nimport { SliderRail, Handle, Track } from \"./SliderItems\"; // example render components - source below\r\n\r\nconst sliderStyle = {\r\n  position: \"relative\",\r\n  width: \"100%\",\r\n  touchAction: \"none\",\r\n};\r\n\r\nconst domain = [500, 6000];\r\n\r\nfunction SliderComponent({ value, onUpdate, onChange }) {\r\n  return (\r\n    <>\r\n      <Slider\r\n        mode={1}\r\n        step={50}\r\n        domain={domain}\r\n        rootStyle={sliderStyle}\r\n        onUpdate={onUpdate}\r\n        onChange={onChange}\r\n        values={value}\r\n      >\r\n        <Rail>\r\n          {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}\r\n        </Rail>\r\n        <Handles>\r\n          {({ handles, getHandleProps }) => (\r\n            <div className=\"slider-handles\">\r\n              {handles.map((handle) => (\r\n                <Handle\r\n                  key={handle.id}\r\n                  handle={handle}\r\n                  domain={domain}\r\n                  getHandleProps={getHandleProps}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n        </Handles>\r\n        <Tracks right={false}>\r\n          {({ tracks, getTrackProps }) => (\r\n            <div className=\"slider-tracks\">\r\n              {tracks.map(({ id, source, target }) => (\r\n                <Track\r\n                  key={id}\r\n                  source={source}\r\n                  target={target}\r\n                  getTrackProps={getTrackProps}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n        </Tracks>\r\n      </Slider>\r\n    </>\r\n  );\r\n}\r\n\r\n// class SliderComponent extends Component {\r\n//   state = {\r\n//     values: defaultValues,\r\n//     update: defaultValues.slice(),\r\n//   }\r\n\r\n//   onUpdate = update => {\r\n//     this.setState({ update })\r\n//   }\r\n\r\n//   onChange = values => {\r\n//     this.setState({ values })\r\n//   }\r\n\r\n//   render() {\r\n//     const {\r\n//       state: { values, update },\r\n//     } = this\r\n\r\n//     return (\r\n//       <div style={{ height: 120, width: '400px', }}>\r\n//         <h1>Home</h1>\r\n//         <Slider\r\n//           mode={1}\r\n//           step={1}\r\n//           domain={domain}\r\n//           rootStyle={sliderStyle}\r\n//           onUpdate={this.onUpdate}\r\n//           onChange={this.onChange}\r\n//           values={values}\r\n//         >\r\n//           <Rail>\r\n//             {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}\r\n//           </Rail>\r\n//           <Handles>\r\n//             {({ handles, getHandleProps }) => (\r\n//               <div className=\"slider-handles\">\r\n//                 {handles.map(handle => (\r\n//                   <Handle\r\n//                     key={handle.id}\r\n//                     handle={handle}\r\n//                     domain={domain}\r\n//                     getHandleProps={getHandleProps}\r\n//                   />\r\n//                 ))}\r\n//               </div>\r\n//             )}\r\n//           </Handles>\r\n//           <Tracks right={false}>\r\n//             {({ tracks, getTrackProps }) => (\r\n//               <div className=\"slider-tracks\">\r\n//                 {tracks.map(({ id, source, target }) => (\r\n//                   <Track\r\n//                     key={id}\r\n//                     source={source}\r\n//                     target={target}\r\n//                     getTrackProps={getTrackProps}\r\n//                   />\r\n//                 ))}\r\n//               </div>\r\n//             )}\r\n//           </Tracks>\r\n//         </Slider>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\nexport default SliderComponent;\r\n","import SliderComponent from \"./Slider\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport \"react-dropdown/style.css\";\r\nimport \"./Dashboard.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst stripOptions = [\"100\", \"200\", \"300\"];\r\nconst overlapOptions = [\"90\", \"95\", \"100\"];\r\nconst defaultOverlapOption = overlapOptions[0];\r\nconst defaultStripOption = stripOptions[0];\r\n\r\nfunction Dashboard() {\r\n  const [WidthUpdate, setWidthUpdate] = useState([500]);\r\n  const [HeightUpdate, setHeightUpdate] = useState([500]);\r\n  const [WidthValues, setWidthValues] = useState([500]);\r\n  const [HeightValues, setHeightValues] = useState([500]);\r\n  const [OverlapValues, setOverlapValues] = useState(overlapOptions[0]);\r\n  const [StripValues, setStripValues] = useState(stripOptions[0]);\r\n  const [LabelValues, setLabelValues] = useState(\r\n    Math.ceil(WidthValues / (StripValues - OverlapValues))\r\n  );\r\n  const [Label2Values, setLabel2Values] = useState(\r\n    Math.ceil((HeightValues * LabelValues) / 1000)\r\n  );\r\n\r\n  const onWidthUpdate = (update) => {\r\n    setWidthUpdate(update);\r\n  };\r\n  const onHeightUpdate = (update) => {\r\n    setHeightUpdate(update);\r\n  };\r\n  const onWidthChange = (value) => {\r\n    setWidthValues(value);\r\n    setLabelValues(Math.ceil(value / (StripValues - OverlapValues)));\r\n    setLabel2Values(\r\n      Math.ceil(\r\n        (HeightValues * Math.ceil(value / (StripValues - OverlapValues))) / 1000\r\n      )\r\n    );\r\n  };\r\n  const onHeightChange = (value) => {\r\n    setHeightValues(value);\r\n    setLabel2Values(Math.ceil((value * LabelValues) / 1000));\r\n  };\r\n  const onOverlapChange = (value) => {\r\n    setOverlapValues(value.value);\r\n    setLabelValues(Math.ceil(WidthValues / (StripValues - value.value)));\r\n    setLabel2Values(\r\n      Math.ceil(\r\n        (HeightValues * Math.ceil(WidthValues / (StripValues - value.value))) /\r\n          1000\r\n      )\r\n    );\r\n  };\r\n  const onStripWidthChange = (value) => {\r\n    setStripValues(value.value);\r\n    setLabelValues(Math.ceil(WidthValues / (value.value - OverlapValues)));\r\n    setLabel2Values(\r\n      Math.ceil(\r\n        (HeightValues *\r\n          Math.ceil(WidthValues / (value.value - OverlapValues))) /\r\n          1000\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mainDiv\">\r\n        <div className=\"imageBlur\">\r\n          <div className=\"main\">\r\n            <h1 className=\"mainHead\">HomeS</h1>\r\n          </div>\r\n          <div className=\"main-content\">\r\n            <div className=\"slider\">\r\n              <p className=\"slider-text\">Opening Width {WidthUpdate}</p>\r\n              <SliderComponent\r\n                value={WidthValues}\r\n                onChange={onWidthChange}\r\n                onUpdate={onWidthUpdate}\r\n              />\r\n            </div>\r\n            <div className=\"slider\">\r\n                <p className=\"slider-text\">Opening Height {HeightUpdate}</p>\r\n              <SliderComponent\r\n                value={HeightValues}\r\n                onChange={onHeightChange}\r\n                onUpdate={onHeightUpdate}\r\n              />\r\n            </div>\r\n            <div className=\"dropdown\">\r\n              <p className=\"dropdown-text\">Overlap</p>\r\n              <Dropdown\r\n                options={overlapOptions}\r\n                onChange={onOverlapChange}\r\n                // className=\"main-dropdown\"\r\n                controlClassName=\"dropdown-inner\"\r\n                arrowClassName=\"dropdown-arrow\"\r\n                placeholderClassName=\"dropdown-placeholder\"\r\n                menuClassName=\"dropdown-list\"\r\n                value={defaultOverlapOption}\r\n                placeholder=\"Select an option\"\r\n              />\r\n            </div>\r\n            <div className=\"dropdown\">\r\n              <p className=\"dropdown-text\">Strip Width</p>\r\n              <Dropdown\r\n                options={stripOptions}\r\n                onChange={onStripWidthChange}\r\n                // className='main-dropdown'\r\n                controlClassName=\"dropdown-inner\"\r\n                arrowClassName=\"dropdown-arrow\"\r\n                placeholderClassName=\"dropdown-placeholder\"\r\n                menuClassName=\"dropdown-list\"\r\n                value={defaultStripOption}\r\n                placeholder=\"Select an option\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <p className=\"label-text\">{LabelValues} strips needed</p>\r\n              <p className=\"label-text\">Total length: {Label2Values}m</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Dashboard from './components/Dashboard'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}